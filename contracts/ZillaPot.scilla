scilla_version 0

(* ZillaPot contract *)

(***************************************************)
(*               Associated library                *)
(***************************************************)

import IntUtils

library ZillaPot

(*type Pot =*)
(*  | Creator of ByStr20*)
(*  | Expiration of Uint256*)
(*  | MaxExpiration of Uint256*)
(*  | InitialBuyIn of Uint256*)
(*  | CurrentBuyIn of Uint256*)
(*  | CurrentPot of Uint256*)
(*  | BuyInIncrement of Uint256*)
(*  | Extension of Uint256*)
(*  | CurrentWinner of ByStr20*)
(*  | Claimed of Bool*)
  
(* Creator, Expiration, MaxExpiration, InitialBuyIn, CurrentBuyIn,  CurrentPot, BuyInIncrement, Extension, CurrentWinner  *)
type PotSettings =
| PotSettings of ByStr20 Uint256 Uint256 Uint256 Uint256 Uint256 Uint256 Uint256 ByStr20 

let one = Uint256 1

(*** Codes ***)
let pot_exists = Uint32 1
let pot_doesnt_exist = Uint32 2
let pot_creation_success = Uint32 3
let pot_creation_failure = Uint32 4



(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ZillaPot
()

(*** Mutable Fields ***)
field pot_map : Map Uint256 PotSettings = Emp Uint256 PotSettings

field nPots : Uint256 = Uint256 0

(***************************************)
(*             Transitions             *)
(***************************************)

(*** Getters ***)

transition getTime()
end

transition numPots()
  n <- nPots;
  e = { _eventname : "Number of total pots"; num : n };
  event e
end

transition potExists(potId_ : Uint256)
  total <- nPots;
  existingPot = uint256_lt potId_ total;
  
  match existingPot with
    | True =>
      e = { _eventname : "Pot Exists"; code : pot_exists };
      event e
    | False =>
      e = { _eventname : "Pot Doesn't Exists"; code : pot_doesnt_exist };
      event e
  end
end

transition getCreator(potId_ : Uint256)
end

transition getExpiration(potId_ : Uint256)
end

transition getMaxExpiration(potId_ : Uint256)
end

transition expired(potId_ : Uint256)
end

transition getInitialBuyIn(potId_ : Uint256)
end

transition getCurrentBuyIn(potId_ : Uint256)
end

transition getCurrentPot(potId_ : Uint256)
end

transition getBuyInIncrement(potId_ : Uint256)
end

transition getTimeExtension(potId_ : Uint256)
end

transition getCurrentWinner(potId_ : Uint256)
end

(*** Game Managment ***)

transition createPot(expiration_ : Uint256, maxExpiration_ : Uint256, initialBuyIn_ : Uint256, buyInIncrement_ : Uint256, extension_ : Uint256)
  currentBuyIn_ = builtin add initialBuyIn_ buyInIncrement_;
  currentPot_ = initialBuyIn_;
  new_pot = PotSettings _sender expiration_ maxExpiration_ initialBuyIn_ currentBuyIn_ currentPot_ buyInIncrement_ extension_ _sender;
  potId <- nPots;
  pot_map[potId] := new_pot;
  new_nPots = builtin add potId one;
  nPots := new_nPots;
  
  is_pot_created = uint256_lt potId new_nPots;
  match is_pot_created with
  | True =>
    e = { _eventname : "New Pot Created"; code : pot_creation_success };
    event e
  | False =>
    e = { _eventname : "Pot Creation Failed"; code : pot_creation_failure };
    event e
  end
end


transition buyIn(potId_ : Uint256)
  game_o <- pot_map[potId_];
  match game_o with
  | Some game =>
    match game with
    | PotSettings creator expiration maxExpiration initialBuyIn currentBuyIn currentPot buyInIncrement extension currentWinner =>
      
      new_currentBuyIn = builtin add currentBuyIn buyInIncrement;
      new_currentPot = builtin add currentPot currentBuyIn;
      new_expiration = builtin add expiration extension;
      
      is_new_expiration = uint256_lt maxExpiration new_expiration;
      

      new_pot = PotSettings creator new_expiration maxExpiration initialBuyIn new_currentBuyIn new_currentPot buyInIncrement extension _sender;
      pot_map[potId_] := new_pot
    end
  | None =>
  end
end


transition claimReward(potId_ : Uint256)
end

